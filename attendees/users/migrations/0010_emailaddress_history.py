# Generated by Django 3.2.11 on 2022-04-10 13:30

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from attendees.persons.models import Utility


class Migration(migrations.Migration):

    dependencies = [
        ('pghistory', '0004_auto_20220906_1625'),
        ('account', '0002_email_max_length'),
        ('users', '0009_group_permission_history'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailAddressProxy',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('account.emailaddress',),
        ),
        migrations.CreateModel(
            name='EmailAddressHistory',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_obj', models.ForeignKey(db_constraint=False, on_delete=models.deletion.DO_NOTHING, related_name='history', to='account.emailaddress')),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('user', models.ForeignKey(db_constraint=False, on_delete=models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('verified', models.BooleanField(default=False, verbose_name='verified')),
                ('primary', models.BooleanField(default=False, verbose_name='primary')),
                ('email', models.EmailField(max_length=254, verbose_name='e-mail address')),
                ('pgh_context', models.ForeignKey(db_constraint=False, null=True, on_delete=models.deletion.DO_NOTHING, related_name='+', to='pghistory.context')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunSQL(Utility.pgh_default_sql('users_emailaddresshistory', index_on_id=True, original_model_table='account_emailaddress')),
        migrations.AlterField(
            model_name='emailaddresshistory',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='history', to='users.emailaddressproxy'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='emailaddressproxy',
            trigger=pgtrigger.compiler.Trigger(name='emailaddress_snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "users_emailaddresshistory" ("user_id", "email", "verified", "primary", "id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."user_id", NEW."email", NEW."verified", NEW."primary", NEW."id", NOW(), \'emailaddress.snapshot\', NEW."id", _pgh_attach_context()); RETURN NULL;', hash='50b32aecfbd0d3c993ba9fe32c3fdc1861c4d359', operation='INSERT', pgid='pgtrigger_emailaddress_snapshot_insert_a8455', table='account_emailaddress', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='emailaddressproxy',
            trigger=pgtrigger.compiler.Trigger(name='emailaddress_snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."user_id" IS DISTINCT FROM NEW."user_id" OR OLD."email" IS DISTINCT FROM NEW."email" OR OLD."verified" IS DISTINCT FROM NEW."verified" OR OLD."primary" IS DISTINCT FROM NEW."primary" OR OLD."id" IS DISTINCT FROM NEW."id")', func='INSERT INTO "users_emailaddresshistory" ("user_id", "email", "verified", "primary", "id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."user_id", NEW."email", NEW."verified", NEW."primary", NEW."id", NOW(), \'emailaddress.snapshot\', NEW."id", _pgh_attach_context()); RETURN NULL;', hash='062ea34fcb3973a2a56764d31cd26780dbf77ca2', operation='UPDATE', pgid='pgtrigger_emailaddress_snapshot_update_3a334', table='account_emailaddress', when='AFTER')),
        ),
    ]
