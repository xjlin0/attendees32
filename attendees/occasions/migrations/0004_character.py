# Generated by Django 3.0.2 on 2020-01-14 05:01

from attendees.persons.models.utility import Utility
from django.contrib.postgres.indexes import GinIndex
from django.db import migrations, models
import django.utils.timezone
import model_utils.fields
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ('occasions', '0003_price'),
    ]

    operations = [
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('assembly', models.ForeignKey(on_delete=models.SET(0), to='occasions.Assembly')),
                ('display_order', models.SmallIntegerField(blank=False, default=0, null=False)),
                ('display_name', models.CharField(blank=True, db_index=True, max_length=50)),
                ('slug', models.SlugField(max_length=50, unique=True, help_text='format: Assembly_name-Character_name')),
                ('type', models.CharField(db_index=True, default='normal', max_length=50)),
                ('infos', models.JSONField(blank=True, default=dict, help_text='example: {"info": "for distrubuting food"}, please keep {} here even there\'s no data', null=True)),
            ],
            options={
                'db_table': 'occasions_characters',
                'ordering': ['assembly', 'display_order'],
            },
            bases=(models.Model, Utility),
        ),
        migrations.RunSQL(Utility.default_sql('occasions_characters')),
        migrations.AddIndex(
            model_name='Character',
            index=GinIndex(fields=['infos'], name='character_infos_gin'),
        ),
        migrations.CreateModel(
            name='CharactersHistory',
            fields=[
                ('pgh_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, on_delete=models.deletion.DO_NOTHING, related_name='history', to='occasions.character')),
                ('id', models.BigIntegerField(db_index=True)),
                ('assembly', models.ForeignKey(db_constraint=False, on_delete=models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='occasions.assembly')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('infos', models.JSONField(blank=True, default=dict, help_text='example: {"info": "for distrubuting food"}, please keep {} here even there\'s no data', null=True)),
                ('display_order', models.SmallIntegerField(default=0)),
                ('slug', models.SlugField(db_index=False, help_text='format: Assembly_name-Character_name')),
                ('type', models.CharField(default='normal', max_length=50)),
                ('display_name', models.CharField(blank=True, max_length=50)),
                ('pgh_context', models.ForeignKey(db_constraint=False, null=True, on_delete=models.deletion.DO_NOTHING, related_name='+', to='pghistory.context')),
            ],
            options={
                'db_table': 'occasions_charactershistory',
            },
        ),
        migrations.RunSQL(Utility.pgh_default_sql('occasions_charactershistory', original_model_table='occasions_characters')),
        pgtrigger.migrations.AddTrigger(
            model_name='character',
            trigger=pgtrigger.compiler.Trigger(name='character_snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "occasions_charactershistory" ("id", "assembly_id", "created", "modified", "is_removed", "infos", "display_order", "slug", "type", "display_name", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."id", NEW."assembly_id", NEW."created", NEW."modified", NEW."is_removed", NEW."infos", NEW."display_order", NEW."slug", NEW."type", NEW."display_name", NOW(), \'character.snapshot\', NEW."id", _pgh_attach_context()); RETURN NULL;', hash='637574c858c14ecc23cb2934d5ecfcbabb064794', operation='INSERT', pgid='pgtrigger_character_snapshot_insert_bb0be', table='occasions_characters', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='character',
            trigger=pgtrigger.compiler.Trigger(name='character_snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."id" IS DISTINCT FROM NEW."id" OR OLD."assembly_id" IS DISTINCT FROM NEW."assembly_id" OR OLD."created" IS DISTINCT FROM NEW."created" OR OLD."modified" IS DISTINCT FROM NEW."modified" OR OLD."is_removed" IS DISTINCT FROM NEW."is_removed" OR OLD."infos" IS DISTINCT FROM NEW."infos" OR OLD."display_order" IS DISTINCT FROM NEW."display_order" OR OLD."slug" IS DISTINCT FROM NEW."slug" OR OLD."type" IS DISTINCT FROM NEW."type" OR OLD."display_name" IS DISTINCT FROM NEW."display_name")', func='INSERT INTO "occasions_charactershistory" ("id", "assembly_id", "created", "modified", "is_removed", "infos", "display_order", "slug", "type", "display_name", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."id", NEW."assembly_id", NEW."created", NEW."modified", NEW."is_removed", NEW."infos", NEW."display_order", NEW."slug", NEW."type", NEW."display_name", NOW(), \'character.snapshot\', NEW."id", _pgh_attach_context()); RETURN NULL;', hash='309b99317fa57390c203d6172977c0de66f77894', operation='UPDATE', pgid='pgtrigger_character_snapshot_update_a6f12', table='occasions_characters', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='character',
            trigger=pgtrigger.compiler.Trigger(name='character_before_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "occasions_charactershistory" ("id", "assembly_id", "created", "modified", "is_removed", "infos", "display_order", "slug", "type", "display_name", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (OLD."id", OLD."assembly_id", OLD."created", OLD."modified", OLD."is_removed", OLD."infos", OLD."display_order", OLD."slug", OLD."type", OLD."display_name", NOW(), \'character.before_delete\', OLD."id", _pgh_attach_context()); RETURN NULL;', hash='7445edaf505fc3af8679a2e94b01489b698dc1a5', operation='DELETE', pgid='pgtrigger_character_before_delete_1a48c', table='occasions_characters', when='AFTER')),
        ),
    ]
