# Generated by Django 3.2.15 on 2022-09-15 05:01

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_celery_beat.models
import django_celery_beat.validators
import pgtrigger.compiler
import pgtrigger.migrations
import timezone_field.fields

from attendees.persons.models import Utility


class Migration(migrations.Migration):

    dependencies = [
        ('pghistory', '0004_auto_20220906_1625'),
        ('django_celery_beat', '0016_alter_crontabschedule_timezone'),
        ('occasions', '0011_crontabl_schedule_history'),
    ]

    operations = [
        migrations.CreateModel(
            name='PeriodicTaskProxy',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('django_celery_beat.periodictask',),
        ),
        migrations.CreateModel(
            name='PeriodicTaskHistory',
            fields=[
                ('name', models.CharField(help_text='Short Description For This Task', max_length=200, verbose_name='Name')),
                ('task', models.CharField(help_text='The Name of the Celery Task that Should be Run.  (Example: "proj.tasks.import_contacts")', max_length=200, verbose_name='Task Name')),
                ('args', models.TextField(blank=True, default='[]', help_text='JSON encoded positional arguments (Example: ["arg1", "arg2"])', verbose_name='Positional Arguments')),
                ('kwargs', models.TextField(blank=True, default='{}', help_text='JSON encoded keyword arguments (Example: {"argument": "value"})', verbose_name='Keyword Arguments')),
                ('queue', models.CharField(blank=True, default=None, help_text='Queue defined in CELERY_TASK_QUEUES. Leave None for default queuing.', max_length=200, null=True, verbose_name='Queue Override')),
                ('exchange', models.CharField(blank=True, default=None, help_text='Override Exchange for low-level AMQP routing', max_length=200, null=True, verbose_name='Exchange')),
                ('routing_key', models.CharField(blank=True, default=None, help_text='Override Routing Key for low-level AMQP routing', max_length=200, null=True, verbose_name='Routing Key')),
                ('headers', models.TextField(blank=True, default='{}', help_text='JSON encoded message headers for the AMQP message.', verbose_name='AMQP Message Headers')),
                ('priority', models.PositiveIntegerField(blank=True, default=None, help_text='Priority Number between 0 and 255. Supported by: RabbitMQ, Redis (priority reversed, 0 is highest).', null=True, validators=[django.core.validators.MaxValueValidator(255)], verbose_name='Priority')),
                ('expires', models.DateTimeField(blank=True, help_text='Datetime after which the schedule will no longer trigger the task to run', null=True, verbose_name='Expires Datetime')),
                ('expire_seconds', models.PositiveIntegerField(blank=True, help_text='Timedelta with seconds which the schedule will no longer trigger the task to run', null=True, verbose_name='Expires timedelta with seconds')),
                ('one_off', models.BooleanField(default=False, help_text='If True, the schedule will only run the task a single time', verbose_name='One-off Task')),
                ('start_time', models.DateTimeField(blank=True, help_text='Datetime when the schedule should begin triggering the task to run', null=True, verbose_name='Start Datetime')),
                ('enabled', models.BooleanField(default=True, help_text='Set to False to disable the schedule', verbose_name='Enabled')),
                ('last_run_at', models.DateTimeField(blank=True, editable=False, help_text='Datetime that the schedule last triggered the task to run. Reset to None if enabled is set to False.', null=True, verbose_name='Last Run Datetime')),
                ('total_run_count', models.PositiveIntegerField(default=0, editable=False, help_text='Running count of how many times the schedule has triggered the task', verbose_name='Total Run Count')),
                ('date_changed', models.DateTimeField(auto_now=True, help_text='Datetime that this PeriodicTask was last modified', verbose_name='Last Modified')),
                ('description', models.TextField(blank=True, help_text='Detailed description about the details of this Periodic Task', verbose_name='Description')),
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('clocked', models.ForeignKey(blank=True, db_constraint=False, help_text='Clocked Schedule to run the task on.  Set only one schedule type, leave the others null.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='django_celery_beat.clockedschedule', verbose_name='Clocked Schedule')),
                ('crontab', models.ForeignKey(blank=True, db_constraint=False, help_text='Crontab Schedule to run the task on.  Set only one schedule type, leave the others null.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='django_celery_beat.crontabschedule', verbose_name='Crontab Schedule')),
                ('interval', models.ForeignKey(blank=True, db_constraint=False, help_text='Interval Schedule to run the task on.  Set only one schedule type, leave the others null.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='django_celery_beat.intervalschedule', verbose_name='Interval Schedule')),
                ('pgh_context', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='history', to='occasions.periodictaskproxy')),
                ('solar', models.ForeignKey(blank=True, db_constraint=False, help_text='Solar Schedule to run the task on.  Set only one schedule type, leave the others null.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='django_celery_beat.solarschedule', verbose_name='Solar Schedule')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunSQL(Utility.pgh_default_sql('occasions_periodictaskhistory', index_on_id=True, original_model_table='django_celery_beat_periodictask')),
        pgtrigger.migrations.AddTrigger(
            model_name='periodictaskproxy',
            trigger=pgtrigger.compiler.Trigger(name='periodictask_snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "occasions_periodictaskhistory" ("name", "task", "interval_id", "crontab_id", "solar_id", "clocked_id", "args", "kwargs", "queue", "exchange", "routing_key", "headers", "priority", "expires", "expire_seconds", "one_off", "start_time", "enabled", "last_run_at", "total_run_count", "date_changed", "description", "id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."name", NEW."task", NEW."interval_id", NEW."crontab_id", NEW."solar_id", NEW."clocked_id", NEW."args", NEW."kwargs", NEW."queue", NEW."exchange", NEW."routing_key", NEW."headers", NEW."priority", NEW."expires", NEW."expire_seconds", NEW."one_off", NEW."start_time", NEW."enabled", NEW."last_run_at", NEW."total_run_count", NEW."date_changed", NEW."description", NEW."id", NOW(), \'periodictask.snapshot\', NEW."id", _pgh_attach_context()); RETURN NULL;', hash='a91742c91fbfc9478522a7ce804601ab6fcf1c1c', operation='INSERT', pgid='pgtrigger_periodictask_snapshot_insert_14089', table='django_celery_beat_periodictask', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='periodictaskproxy',
            trigger=pgtrigger.compiler.Trigger(name='periodictask_snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."name" IS DISTINCT FROM NEW."name" OR OLD."task" IS DISTINCT FROM NEW."task" OR OLD."interval_id" IS DISTINCT FROM NEW."interval_id" OR OLD."crontab_id" IS DISTINCT FROM NEW."crontab_id" OR OLD."solar_id" IS DISTINCT FROM NEW."solar_id" OR OLD."clocked_id" IS DISTINCT FROM NEW."clocked_id" OR OLD."args" IS DISTINCT FROM NEW."args" OR OLD."kwargs" IS DISTINCT FROM NEW."kwargs" OR OLD."queue" IS DISTINCT FROM NEW."queue" OR OLD."exchange" IS DISTINCT FROM NEW."exchange" OR OLD."routing_key" IS DISTINCT FROM NEW."routing_key" OR OLD."headers" IS DISTINCT FROM NEW."headers" OR OLD."priority" IS DISTINCT FROM NEW."priority" OR OLD."expires" IS DISTINCT FROM NEW."expires" OR OLD."expire_seconds" IS DISTINCT FROM NEW."expire_seconds" OR OLD."one_off" IS DISTINCT FROM NEW."one_off" OR OLD."start_time" IS DISTINCT FROM NEW."start_time" OR OLD."enabled" IS DISTINCT FROM NEW."enabled" OR OLD."last_run_at" IS DISTINCT FROM NEW."last_run_at" OR OLD."total_run_count" IS DISTINCT FROM NEW."total_run_count" OR OLD."date_changed" IS DISTINCT FROM NEW."date_changed" OR OLD."description" IS DISTINCT FROM NEW."description" OR OLD."id" IS DISTINCT FROM NEW."id")', func='INSERT INTO "occasions_periodictaskhistory" ("name", "task", "interval_id", "crontab_id", "solar_id", "clocked_id", "args", "kwargs", "queue", "exchange", "routing_key", "headers", "priority", "expires", "expire_seconds", "one_off", "start_time", "enabled", "last_run_at", "total_run_count", "date_changed", "description", "id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."name", NEW."task", NEW."interval_id", NEW."crontab_id", NEW."solar_id", NEW."clocked_id", NEW."args", NEW."kwargs", NEW."queue", NEW."exchange", NEW."routing_key", NEW."headers", NEW."priority", NEW."expires", NEW."expire_seconds", NEW."one_off", NEW."start_time", NEW."enabled", NEW."last_run_at", NEW."total_run_count", NEW."date_changed", NEW."description", NEW."id", NOW(), \'periodictask.snapshot\', NEW."id", _pgh_attach_context()); RETURN NULL;', hash='7892d74317ed05f43a0d045d9c176d803bec7c8a', operation='UPDATE', pgid='pgtrigger_periodictask_snapshot_update_211a3', table='django_celery_beat_periodictask', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='periodictaskproxy',
            trigger=pgtrigger.compiler.Trigger(name='periodictask_before_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "occasions_periodictaskhistory" ("name", "task", "interval_id", "crontab_id", "solar_id", "clocked_id", "args", "kwargs", "queue", "exchange", "routing_key", "headers", "priority", "expires", "expire_seconds", "one_off", "start_time", "enabled", "last_run_at", "total_run_count", "date_changed", "description", "id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (OLD."name", OLD."task", OLD."interval_id", OLD."crontab_id", OLD."solar_id", OLD."clocked_id", OLD."args", OLD."kwargs", OLD."queue", OLD."exchange", OLD."routing_key", OLD."headers", OLD."priority", OLD."expires", OLD."expire_seconds", OLD."one_off", OLD."start_time", OLD."enabled", OLD."last_run_at", OLD."total_run_count", OLD."date_changed", OLD."description", OLD."id", NOW(), \'periodictask.before_delete\', OLD."id", _pgh_attach_context()); RETURN NULL;', hash='7db5210e57fac54319677fd776ff59273eb0e3a1', operation='DELETE', pgid='pgtrigger_periodictask_before_delete_db9b4', table='django_celery_beat_periodictask', when='AFTER')),
        ),
    ]
