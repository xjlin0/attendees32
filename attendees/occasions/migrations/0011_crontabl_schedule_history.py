# Generated by Django 3.2.15 on 2022-09-15 05:01

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_celery_beat.models
import django_celery_beat.validators
import pgtrigger.compiler
import pgtrigger.migrations
import timezone_field.fields

from attendees.persons.models import Utility


class Migration(migrations.Migration):

    dependencies = [
        ('pghistory', '0004_auto_20220906_1625'),
        ('django_celery_beat', '0016_alter_crontabschedule_timezone'),
        ('occasions', '0010_internval_schedule_history'),
    ]

    operations = [
        migrations.CreateModel(
            name='CrontabScheduleProxy',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('django_celery_beat.crontabschedule',),
        ),
        migrations.CreateModel(
            name='CrontabScheduleHistory',
            fields=[
                ('minute', models.CharField(default='*', help_text='Cron Minutes to Run. Use "*" for "all". (Example: "0,30")', max_length=240, validators=[django_celery_beat.validators.minute_validator], verbose_name='Minute(s)')),
                ('hour', models.CharField(default='*', help_text='Cron Hours to Run. Use "*" for "all". (Example: "8,20")', max_length=96, validators=[django_celery_beat.validators.hour_validator], verbose_name='Hour(s)')),
                ('day_of_week', models.CharField(default='*', help_text='Cron Days Of The Week to Run. Use "*" for "all". (Example: "0,5")', max_length=64, validators=[django_celery_beat.validators.day_of_week_validator], verbose_name='Day(s) Of The Week')),
                ('day_of_month', models.CharField(default='*', help_text='Cron Days Of The Month to Run. Use "*" for "all". (Example: "1,15")', max_length=124, validators=[django_celery_beat.validators.day_of_month_validator], verbose_name='Day(s) Of The Month')),
                ('month_of_year', models.CharField(default='*', help_text='Cron Months Of The Year to Run. Use "*" for "all". (Example: "0,6")', max_length=64, validators=[django_celery_beat.validators.month_of_year_validator], verbose_name='Month(s) Of The Year')),
                ('timezone', timezone_field.fields.TimeZoneField(default=django_celery_beat.models.crontab_schedule_celery_timezone, help_text='Timezone to Run the Cron Schedule on. Default is UTC.', use_pytz=False, verbose_name='Cron Timezone')),
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('pgh_context', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='history', to='occasions.crontabscheduleproxy')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunSQL(Utility.pgh_default_sql('occasions_crontabschedulehistory', index_on_id=True, original_model_table='django_celery_beat_crontabschedule')),
        pgtrigger.migrations.AddTrigger(
            model_name='crontabscheduleproxy',
            trigger=pgtrigger.compiler.Trigger(name='crontabschedule_snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "occasions_crontabschedulehistory" ("minute", "hour", "day_of_week", "day_of_month", "month_of_year", "timezone", "id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."minute", NEW."hour", NEW."day_of_week", NEW."day_of_month", NEW."month_of_year", NEW."timezone", NEW."id", NOW(), \'crontabschedule.snapshot\', NEW."id", _pgh_attach_context()); RETURN NULL;', hash='9102adf40baf33e6c2e3ff02b684c2944be69f5c', operation='INSERT', pgid='pgtrigger_crontabschedule_snapshot_insert_c7b77', table='django_celery_beat_crontabschedule', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='crontabscheduleproxy',
            trigger=pgtrigger.compiler.Trigger(name='crontabschedule_snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."minute" IS DISTINCT FROM NEW."minute" OR OLD."hour" IS DISTINCT FROM NEW."hour" OR OLD."day_of_week" IS DISTINCT FROM NEW."day_of_week" OR OLD."day_of_month" IS DISTINCT FROM NEW."day_of_month" OR OLD."month_of_year" IS DISTINCT FROM NEW."month_of_year" OR OLD."timezone" IS DISTINCT FROM NEW."timezone" OR OLD."id" IS DISTINCT FROM NEW."id")', func='INSERT INTO "occasions_crontabschedulehistory" ("minute", "hour", "day_of_week", "day_of_month", "month_of_year", "timezone", "id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."minute", NEW."hour", NEW."day_of_week", NEW."day_of_month", NEW."month_of_year", NEW."timezone", NEW."id", NOW(), \'crontabschedule.snapshot\', NEW."id", _pgh_attach_context()); RETURN NULL;', hash='e22b34fa11982ca8d9ccff37a855dd49798c02a1', operation='UPDATE', pgid='pgtrigger_crontabschedule_snapshot_update_3cf20', table='django_celery_beat_crontabschedule', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='crontabscheduleproxy',
            trigger=pgtrigger.compiler.Trigger(name='crontabschedule_before_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "occasions_crontabschedulehistory" ("minute", "hour", "day_of_week", "day_of_month", "month_of_year", "timezone", "id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (OLD."minute", OLD."hour", OLD."day_of_week", OLD."day_of_month", OLD."month_of_year", OLD."timezone", OLD."id", NOW(), \'crontabschedule.before_delete\', OLD."id", _pgh_attach_context()); RETURN NULL;', hash='8481d4a6d2a035b6d07e1e4be591706721c33a4b', operation='DELETE', pgid='pgtrigger_crontabschedule_before_delete_bc78e', table='django_celery_beat_crontabschedule', when='AFTER')),
        ),
    ]
